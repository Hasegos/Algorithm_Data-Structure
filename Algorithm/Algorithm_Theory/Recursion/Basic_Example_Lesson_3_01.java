import java.lang.Math;

/*
    1. ????????? ????????? base case, ??? ???????????? ?????? ???????????? case??? ????????? ???
    2. ?????? case??? ?????? base case??? ???????????? ???
*/
public class Basic_Example_Lesson_3_01 {
    
    public static void main(String[] args) {
        
    }
    /*
        ??? ????????? ????????? data[0]?????? data[n-1] ???????????? target??? ???????????? ?????????.
        ????????? ?????? ????????? ?????? ????????? 0??? ?????? ????????????. ??? ????????? ??????????????????.
        0??? ????????? n??? ????????? 
    */
    int search(int [] data, int n, int target){
        for(int i = 0; i < n; i++){
            if(data[i] == target){
                return i;
            }
            return -1;
        }
    }
    /*
        ??? ????????? ????????? data[begin]?????? data[end] ???????????? target???
        ????????????. ???, ??????????????? ???????????? ?????????(explicit)?????? ????????????.
        
        ??? ????????? search(data, 0, n-1, target)?????? ???????????????
        ??? ???????????? ????????? ????????? ????????? ?????? ??????
        
        ??????????????? recursion??? ???????????? ????????????.
    */
    int search(int [] data, int begin, int end, int target){
        // ?????? 1.
        if(begin > end)
            return -1;        
        else if(target == data[begin])
            return begin;        
        else 
            return search(data, begin + 1, end, target);
        
        // ?????? 2.
        if(begin > end)
            return -1;        
        else if(target == data[begin])
            return begin;        
        else 
            return search(data, begin, end - 1, target);
        
        // ?????? 3.
        if(begin > end)
            return -1;                
        else {
            int middle = (begin + end) / 2;
            if(data[middle] == target)
                return middle;
            int index = search(data, begin, middle-1, target);
            if(index != -1)
                return index;
            else
                return search(data, middle + 1, end, target);
                
        }            
    }
    /*
        ??????????????? ????????? : ????????? ??????
        
        ??? ????????? ????????? data[begin]?????? data[end] ????????????
        ???????????? ?????? ????????????. begin <= end ?????? ????????????.
    */
    int findMax(int[] data, int begin, int end) {
        // ?????? 1.
        if(begin == end)
            return data[begin];
        else 
            return Math.max(data[begin],findMax(data, begin + 1, end));
        
        // ?????? 2.
        if(begin == end)
            return data[begin];
        else {
            int middle = (begin + end) / 2;
            int max1 = findMax(data, begin, middle);
            int max2 = findMax(data, middle + 1, end);
            return Math.max(max1,max2);
        }
    }
    
    // items[begin] ?????? items[end] ???????????? target??? ????????????.
    public static int binarySearch(String[] items, String target, int begin, int end){
        if(begin > end)
            return -1;
        else {
            int middle = (begin + end) / 2;
            int comResult = target.compareTo(items[middle]);
            if(comResult == 0)
                return middle;
            else if(comResult < 0)
                return binarySearch(items, target, begin, middle - 1);
            else 
                return binarySearch(items, target, middle + 1, end);
        }        
    }    
}
